/**
 * Vulnerability Registry Service
 * 
 * This service provides functions for interacting with the Vulnerability Registry Anchor program
 * on the Solana blockchain.
 */

import { PublicKey, SystemProgram } from '@solana/web3.js';
import { 
  PROGRAM_IDS, 
  getConnectionAndProvider, 
  createProgram,
  sendTransaction
} from './anchorUtils';
import { SolanaNetwork, DEFAULT_NETWORK } from '../../../lib/network-config';

// Define a placeholder IDL until the actual IDL is available
// This will be replaced with the actual IDL once the Anchor programs are built
const vulnerabilityRegistryIdl: any = {
  version: "0.1.0",
  name: "vulnerability_registry",
  instructions: [
    {
      name: "submitVulnerability",
      accounts: [
        { name: "vulnerability", isMut: true, isSigner: true },
        { name: "submitter", isMut: true, isSigner: true },
        { name: "systemProgram", isMut: false, isSigner: false }
      ],
      args: [
        { name: "title", type: "string" },
        { name: "description", type: "string" },
        { name: "severity", type: "string" },
        { name: "cvssScore", type: "f32" },
        { name: "cvssVector", type: "string" },
        { name: "ipfsHash", type: "string" }
      ]
    },
    {
      name: "validateVulnerability",
      accounts: [
        { name: "vulnerability", isMut: true, isSigner: false },
        { name: "validator", isMut: true, isSigner: true },
        { name: "systemProgram", isMut: false, isSigner: false }
      ],
      args: [
        { name: "isValid", type: "bool" },
        { name: "comments", type: "string" }
      ]
    },
    {
      name: "updateVulnerabilityStatus",
      accounts: [
        { name: "vulnerability", isMut: true, isSigner: false },
        { name: "updater", isMut: true, isSigner: true },
        { name: "systemProgram", isMut: false, isSigner: false }
      ],
      args: [
        { name: "newStatus", type: "string" }
      ]
    }
  ],
  accounts: [
    {
      name: "vulnerability",
      type: {
        kind: "struct",
        fields: [
          { name: "title", type: "string" },
          { name: "description", type: "string" },
          { name: "submitter", type: "publicKey" },
          { name: "severity", type: "string" },
          { name: "cvssScore", type: "f32" },
          { name: "cvssVector", type: "string" },
          { name: "status", type: "string" },
          { name: "ipfsHash", type: "string" },
          { name: "submittedAt", type: "i64" }
        ]
      }
    }
  ]
};

/**
 * Submits a new vulnerability
 * @param title Vulnerability title
 * @param description Vulnerability description
 * @param severity Vulnerability severity (Critical, High, Medium, Low, Informational)
 * @param cvssScore CVSS score
 * @param cvssVector CVSS vector string
 * @param ipfsHash IPFS hash of detailed vulnerability report
 * @param network Solana network
 * @returns Transaction signature and vulnerability ID
 */
export const submitVulnerability = async (
  title: string,
  description: string,
  severity: string,
  cvssScore: number,
  cvssVector: string,
  ipfsHash: string,
  network: SolanaNetwork = DEFAULT_NETWORK
): Promise<{ signature: string, vulnerabilityId: PublicKey }> => {
  const { connection, provider } = await getConnectionAndProvider(network);
  const program = createProgram(PROGRAM_IDS.VULNERABILITY_REGISTRY, vulnerabilityRegistryIdl, provider);
  
  // Generate a new keypair for the vulnerability account
  const vulnerabilityId = PublicKey.unique();
  
  // Submit the vulnerability
  const instruction = await program.methods
    .submitVulnerability(
      title,
      description,
      severity,
      cvssScore,
      cvssVector,
      ipfsHash
    )
    .accounts({
      vulnerability: vulnerabilityId,
      submitter: provider.wallet.publicKey,
      systemProgram: SystemProgram.programId,
    })
    .instruction();
  
  const signature = await sendTransaction(connection, [instruction]);
  
  return { signature, vulnerabilityId };
};

/**
 * Validates a vulnerability
 * @param vulnerabilityId Vulnerability ID
 * @param isValid Whether the vulnerability is valid
 * @param comments Validator comments
 * @param network Solana network
 * @returns Transaction signature
 */
export const validateVulnerability = async (
  vulnerabilityId: PublicKey,
  isValid: boolean,
  comments: string,
  network: SolanaNetwork = DEFAULT_NETWORK
): Promise<string> => {
  const { connection, provider } = await getConnectionAndProvider(network);
  const program = createProgram(PROGRAM_IDS.VULNERABILITY_REGISTRY, vulnerabilityRegistryIdl, provider);
  
  // Validate the vulnerability
  const instruction = await program.methods
    .validateVulnerability(isValid, comments)
    .accounts({
      vulnerability: vulnerabilityId,
      validator: provider.wallet.publicKey,
      systemProgram: SystemProgram.programId,
    })
    .instruction();
  
  return await sendTransaction(connection, [instruction]);
};

/**
 * Updates a vulnerability's status
 * @param vulnerabilityId Vulnerability ID
 * @param newStatus New status (Submitted, Under Review, Validated, Rejected, Disclosed)
 * @param network Solana network
 * @returns Transaction signature
 */
export const updateVulnerabilityStatus = async (
  vulnerabilityId: PublicKey,
  newStatus: string,
  network: SolanaNetwork = DEFAULT_NETWORK
): Promise<string> => {
  const { connection, provider } = await getConnectionAndProvider(network);
  const program = createProgram(PROGRAM_IDS.VULNERABILITY_REGISTRY, vulnerabilityRegistryIdl, provider);
  
  // Update the vulnerability status
  const instruction = await program.methods
    .updateVulnerabilityStatus(newStatus)
    .accounts({
      vulnerability: vulnerabilityId,
      updater: provider.wallet.publicKey,
      systemProgram: SystemProgram.programId,
    })
    .instruction();
  
  return await sendTransaction(connection, [instruction]);
};

/**
 * Gets a vulnerability's details
 * @param vulnerabilityId Vulnerability ID
 * @param network Solana network
 * @returns Vulnerability details
 */
export const getVulnerability = async (
  vulnerabilityId: PublicKey,
  network: SolanaNetwork = DEFAULT_NETWORK
) => {
  const { provider } = await getConnectionAndProvider(network);
  const program = createProgram(PROGRAM_IDS.VULNERABILITY_REGISTRY, vulnerabilityRegistryIdl, provider);
  
  // Fetch the vulnerability account
  // @ts-ignore - We know this account exists in the IDL
  return await program.account.vulnerability.fetch(vulnerabilityId);
};

/**
 * Gets all vulnerabilities submitted by a user
 * @param submitter Submitter's public key
 * @param network Solana network
 * @returns Array of vulnerabilities
 */
export const getVulnerabilitiesBySubmitter = async (
  submitter: PublicKey,
  network: SolanaNetwork = DEFAULT_NETWORK
) => {
  const { provider } = await getConnectionAndProvider(network);
  const program = createProgram(PROGRAM_IDS.VULNERABILITY_REGISTRY, vulnerabilityRegistryIdl, provider);
  
  // Fetch vulnerabilities by submitter
  // @ts-ignore - We know this account exists in the IDL
  return await program.account.vulnerability.all([
    {
      memcmp: {
        offset: 8, // After discriminator
        bytes: submitter.toBase58(),
      },
    },
  ]);
};